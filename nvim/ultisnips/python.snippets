priority -50

snippet #! "shebang"
#!/usr/bin/env python3
endsnippet

snippet imp "import"
import ${1:module}
endsnippet

snippet uni "unicode"
def __unicode__(self):
	${1:representation}
endsnippet

snippet from "from"
from ${1:package} import ${2:module}
endsnippet

snippet wh
while ${1:condition}:
	${2}
endsnippet

snippet with "with"
with ${1:expr} as ${2:var}:
	${3}
endsnippet

snippet awith "async with"
async with ${1:expr} as ${2:var}:
	${3}
endsnippet

snippet cl "class"
class ${1:ClassName}(${2:object}):
	def __init__(self, ${3:arg}):
		${4:super($1, self).__init__()}
		self.$3 = $3
		${0}
endsnippet

snippet def "function"
def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
	${3}
endsnippet

snippet adef "async function"
async def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
	${3}
endsnippet

snippet if "if"
if ${1:condition}:
	${1}
endsnippet

snippet elif "else if"
elif ${1:condition}:
	${2}
endsnippet

snippet else "else"
else:
	${1}
endsnippet

snippet for "for"
for ${1:item} in ${2:items}:
	${3}
endsnippet

snippet enc "encode"
# -*- coding: ${1:utf-8} -*-
endsnippet

snippet try "try"
try:
	${1}
endsnippet

snippet excp "except"
except ${1:exception} as ${2:e}:
	${3}
endsnippet

snippet final "finally"
finally:
	${1}
endsnippet

snippet ifmain
if __name__ == '__main__':
	${1:main()}
endsnippet

snippet _
__${1:init}__
endsnippet

# vim:ft=snippets:
